import{IO as S,Parsing as C,scanFiles as b}from"@tailwindcss/oxide";import{Features as g,transform as P}from"lightningcss";import x from"path";import{compile as M}from"tailwindcss";function R(){let r=null,i=new Set,s={},u=!1,f=[];function d(){if(!r)return;let e=[];for(let n of Object.keys(s)){let t=r.moduleGraph.getModuleById(n);if(!t){delete s[n];continue}r.moduleGraph.invalidateModule(t),e.push({type:`${t.type}-update`,path:t.url,acceptedPath:t.url,timestamp:Date.now()})}e.length>0&&r.hot.send({type:"update",updates:e})}function c(e,n){let t=!1;for(let o of b([{content:e,extension:n}],S.Sequential|C.Sequential)){if(!t){if(i.has(o))continue;t=!0}i.add(o)}return t}function m(e){return M(e).build(Array.from(i))}function v(e){return k(m(e),{minify:u})}async function p(e,n,t){let o={...e,getCombinedSourcemap:()=>{throw new Error("getCombinedSourcemap not implemented")}};for(let l of f){if(!l.transform)continue;let w="handler"in l.transform?l.transform.handler:l.transform;try{let a=await w.call(o,t,n);if(!a)continue;typeof a=="string"?t=a:a.code&&(t=a.code)}catch{console.error(`Error running ${l.name} on Tailwind CSS output. Skipping.`)}}return t}return[{name:"@tailwindcss/vite:scan",enforce:"pre",configureServer(e){r=e},async configResolved(e){u=e.build.cssMinify!==!1,f=e.plugins.filter(n=>["vite:css",...e.command==="build"?["vite:css-post"]:[]].includes(n.name))},transformIndexHtml(e){c(e,"html")&&d()},transform(e,n){if(n.includes("/.vite/"))return;let t=h(n);t===""||t==="css"||(c(e,t),d())}},{name:"@tailwindcss/vite:generate:serve",apply:"serve",async transform(e,n){return y(n,e)?(s[n]="",{code:await p(this,n,m(e))}):void 0}},{name:"@tailwindcss/vite:generate:build",apply:"build",transform(e,n){y(n,e)&&(s[n]=e)},async renderChunk(e,n){for(let[t,o]of Object.entries(s))await p(this,t,v(o))}}]}function h(r){let[i]=r.split("?",2);return x.extname(i).slice(1)}function y(r,i){if(!r.includes("/.vite/"))return h(r)==="css"&&i.includes("@tailwind")}function k(r,{file:i="input.css",minify:s=!1}={}){return P({filename:i,code:Buffer.from(r),minify:s,sourceMap:!1,drafts:{customMedia:!0},nonStandard:{deepSelectorCombinator:!0},include:g.Nesting,exclude:g.LogicalProperties,targets:{safari:16<<16|1024},errorRecovery:!0}).code.toString()}export{R as default};
